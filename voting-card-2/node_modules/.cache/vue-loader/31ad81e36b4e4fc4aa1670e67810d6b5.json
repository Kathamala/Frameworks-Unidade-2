{"remainingRequest":"/home/thiago/Documentos/voting-card-2/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/thiago/Documentos/voting-card-2/src/components/voting-form.vue?vue&type=style&index=0&id=334a92ca&scoped=true&lang=css","dependencies":[{"path":"/home/thiago/Documentos/voting-card-2/src/components/voting-form.vue","mtime":1629137181856},{"path":"/home/thiago/Documentos/voting-card-2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/thiago/Documentos/voting-card-2/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1628298225000},{"path":"/home/thiago/Documentos/voting-card-2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/thiago/Documentos/voting-card-2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/thiago/Documentos/voting-card-2/node_modules/vue-loader-v16/dist/index.js","mtime":1628298225000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5mb3JtLWl0ZW0gewogIGRpc3BsYXk6IGZsZXg7CiAgbWFyZ2luLWJvdHRvbTogMS43cmVtOwp9Cg=="},{"version":3,"sources":["/home/thiago/Documentos/voting-card-2/src/components/voting-form.vue"],"names":[],"mappings":";AAgIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB","file":"/home/thiago/Documentos/voting-card-2/src/components/voting-form.vue","sourceRoot":"","sourcesContent":["<template>\n  <form @submit.prevent=\"onSubmit\">\n    <h2>Edita votação</h2>\n    <Input\n      type=\"textarea\"\n      label=\"Título\"\n      v-model=\"vt.title\"\n      placeholder=\"Digite o título da votação\"\n      isRequired=\"true\"\n      :error=\"errors['title']\"\n      @input=\"touched['title'] = true\"\n      @blur=\"checkField('title')\"\n    />\n    <Input\n      label=\"Opção 1\"\n      v-model=\"vt.option1\"\n      placeholder=\"Digite a 1ª opção\"\n      isRequired=\"true\"\n      :error=\"errors['option1']\"\n      @input=\"touched['option1'] = true\"\n      @blur=\"checkField('option1')\"\n    />\n    <Input\n      label=\"Votes 1\"\n      v-model=\"vt.votes1\"\n      placeholder=\"Digite a quantidade de votos da 1ª opção\"\n      isRequired=\"true\"\n      :error=\"errors['votes1']\"\n      @input=\"touched['votes1'] = true\"\n      @blur=\"checkField('votes1')\"\n    />    \n    <Input\n      label=\"Opção 2\"\n      v-model=\"vt.option2\"\n      placeholder=\"Digite a 2ª opção\"\n      isRequired=\"true\"\n      :error=\"errors['option2']\"\n      @input=\"touched['option2'] = true\"\n      @blur=\"checkField('option2')\"\n    />\n    <Input\n      label=\"Votes 2\"\n      v-model=\"vt.votes2\"\n      placeholder=\"Digite a quantidade de votos da 2ª opção\"\n      isRequired=\"true\"\n      :error=\"errors['votes2']\"\n      @input=\"touched['votes2'] = true\"\n      @blur=\"checkField('votes2')\"\n    />      \n    <input type=\"submit\" value=\"Atualizar\" />\n    <button @click=\"$emit('cancel')\" type=\"button\">Cancelar</button>\n  </form>\n</template>\n\n<script>\nimport Input from './Input.vue'\nimport { minLengthValidation, requiredIsANumber, requiredValidation } from './validations'\n\nconst validate = {\n  title: (value) => minLengthValidation(3, value),\n  option1: requiredValidation,\n  option2: requiredValidation,\n  votes1: requiredIsANumber,\n  votes2: requiredIsANumber\n}\n\nexport default {\n  components: { Input },\n  props: ['vote'],\n  data() {\n    const { title, options } = this.vote || {}\n    console.log(options);\n    const [{\n      text: option1,\n      count: votes1\n    }, {\n      text: option2,\n      count: votes2\n      }\n    ] = options || [{text: '', count: 0}, {text: '', count: 0}]\n\n    return {\n      vt: { title, option1, option2, votes1, votes2 },\n      errors: {},\n      touched: {}\n    }\n  },\n  methods: {\n    checkField(name) {\n      if(this.vt[name] === undefined){\n        this.vt[name] = ''\n      }\n      const value = this.vt[name]\n      const error = validate[name] ? validate[name](value) : null\n      const nameError = this.touched[name] ? error : null\n      this.errors[name] = nameError\n    },\n    onSubmit() {\n      Object.keys(this.vt).forEach((field) => {\n        this.touched[field] = true\n        this.checkField(field)\n      })\n      const errorsIsEmpty = !Object.values(this.errors).some((v) => v)\n      if (errorsIsEmpty) {\n        const options = [\n          {\n            text: this.vt.option1,\n            count: this.vt.votes1\n          },\n          {\n            text: this.vt.option2,\n            count: this.vt.votes2\n          }          \n        ].filter((o) => o && o.text.trim() !== '')\n        this.$emit('update', {\n          title: this.vt.title,\n          options\n        })\n      }\n    }\n  },\n  created: function (){\n    console.log(this.vote);\n  }\n}\n</script>\n\n<style scoped>\n.form-item {\n  display: flex;\n  margin-bottom: 1.7rem;\n}\n</style>"]}]}